# zipline import
from zipline.pipeline.data import EquityPricing
from zipline.finance import slippage 
from zipline.api import (   symbol,
                            schedule_function,
                            date_rules,
                            time_rules,
                            order_percent,
                            order_target_percent,
                            get_open_orders,
                            cancel_order,
                            set_slippage,
                            get_datetime)

# import pandas and numpy
import pandas as pd
import numpy as np

def initialize(context):

    # slippage model
    set_slippage(slippage.FixedSlippage(spread=0.01))

    # stock universe - list of tickers
    securities_500 = ['MMM','ABT','ABBV','ABMD','ACN','ATVI','ADBE','AMD','AAP','AES','AFL','A','APD','AKAM','ALK','ALB','ARE','ALXN','ALGN','ALLE','LNT','ALL','GOOGL','GOOG','MO','AMZN','AEE','AAL','AEP','AXP','AIG','AMT','AWK','AMP','ABC','AME','AMGN','APH','ADI','ANSS','ANTM','AON','AOS','APA','AAPL','AMAT','ADM','ANET','AJG','AIZ','T','ATO','ADSK','ADP','AZO','AVB','AVY','BLL','BAC','BK','BAX','BDX','BRK.B','BBY','BIO','BIIB','BLK','BA','BKNG','BWA','BXP','BSX','BMY','AVGO','BR','BF.B','CHRW','COG','CDNS','CPB','COF','CAH','KMX','CCL','CARR','CAT','CBOE','CBRE','CDW','CE','CNC','CNP','CERN','CF','SCHW','CHTR','CVX','CMG','CB','CHD','CI','CINF','CTAS','CSCO','C','CFG','CTXS','CLX','CME','CMS','KO','CTSH','CL','CMCSA','CMA','CAG','COP','ED','STZ','COO','CPRT','GLW','CTVA','COST','CCI','CSX','CMI','CVS','DHI','DHR','DRI','DVA','DE','DAL','XRAY','DVN','DXCM','FANG','DLR','DFS','DISCA','DISCK','DISH','DG','DLTR','D','DPZ','DOV','DOW','DTE','DUK','DRE','DD','DXC','EMN','ETN','EBAY','ECL','EIX','EW','EA','EMR','ETR','EOG','EFX','EQIX','EQR','ESS','EL','EVRG','ES','RE','EXC','EXPE','EXPD','EXR','XOM','FFIV','FB','FAST','FRT','FDX','FIS','FITB','FE','FRC','FISV','FLT','FLIR','FLS','FMC','F','FTNT','FTV','FBHS','FOXA','FOX','BEN','FCX','GPS','GRMN','IT','GD','GE','GIS','GM','GPC','GILD','GPN','GS','GWW','HAL','HBI','HIG','HAS','HCA','HSIC','HSY','HES','HPE','HLT','HFC','HOLX','HD','HON','HRL','HST','HPQ','HUM','HBAN','HII','IEX','IDXX','INFO','ITW','ILMN','INCY','IR','INTC','ICE','IBM','IP','IPG','IFF','INTU','ISRG','IVZ','IPGP','IQV','IRM','JKHY','JBHT','SJM','JNJ','JCI','JPM','JNPR','KSU','K','KEY','KEYS','KMB','KIM','KMI','KLAC','KHC','KR','LB','LH','LRCX','LW','LVS','LEG','LDOS','LEN','LLY','LNC','LIN','LYV','LKQ','LMT','L','LOW','LYB','MTB','MRO','MPC','MKTX','MAR','MMC','MLM','MAS','MA','MKC','MXIM','MCD','MCK','MDT','MRK','MET','MTD','MGM','MCHP','MU','MSFT','MAA','MHK','TAP','MDLZ','MNST','MCO','MS','MOS','MSI','MSCI','NDAQ','NTAP','NFLX','NWL','NEM','NWSA','NWS','NEE','NLSN','NKE','NI','NSC','NTRS','NOC','NCLH','NOV','NRG','NUE','NVDA','NVR','ORLY','OXY','ODFL','OMC','OKE','ORCL','OTIS','PCAR','PKG','PH','PAYX','PAYC','PYPL','PNR','PBCT','PEP','PKI','PRGO','PFE','PM','PSX','PNW','PXD','PNC','PPG','PPL','PFG','PG','PGR','PLD','PRU','PEG','PSA','PHM','PVH','QRVO','PWR','QCOM','DGX','RL','RJF','O','REG','REGN','RF','RSG','RMD','RHI','ROK','ROP','ROST','RCL','SPGI','CRM','SBAC','SLB','STX','SEE','SRE','NOW','SHW','SPG','SWKS','SLG','SNA','SO','LUV','SWK','SBUX','STT','STE','SYK','SIVB','SNPS','SYY','TMUS','TROW','TTWO','TPR','TGT','TEL','FTI','TDY','TFX','TER','TSLA','TXN','TXT','TMO','TJX','TSCO','TT','TDG','TRV','TWTR','TYL','TSN','UDR','ULTA','USB','UA','UNP','UAL','UNH','UPS','URI','UHS','UNM','VLO','VAR','VTR','VRSN','VRSK','VZ','VRTX','VFC','V','VNO','VMC','WRB','WAB','WMT','WBA','DIS','WM','WAT','WEC','WFC','WELL','WST','WDC','WU','WRK','WY','WHR','WMB','WLTW','WYNN','XEL','XRX','XLNX','XYL','YUM','ZBRA','ZBH','ZION','ZTS']
    
    # change string list of tickers into asset list using symbol function
    context.universe = [symbol(s) for s in securities_500]
    #print(len(context.universe))

    # convert list into a dataframe 
    context.universe_df = pd.DataFrame(index=context.universe)

    # define # days in our moving average
    context.day1ago_sma_fast = 5
    context.day1ago_sma_slow = 20
    context.day2ago_sma_fast = context.day1ago_sma_fast + 1
    context.day2ago_sma_slow = context.day1ago_sma_slow + 1
    context.sma_longterm = 200

    # set counters
    context.num_above = 0.0
    context.total_num = 0.0
    context.pct_above = 0.0
    
    # schedule functions
    schedule_function(trade_market_open, date_rules.every_day(), time_rules.market_open())
    schedule_function(cancel_open, date_rules.every_day(), time_rules.market_close())
    schedule_function(trade_market_close, date_rules.every_day(), time_rules.market_close(minutes=10))

def before_trading_start(context,data):
    
    # get data for our moving average
    context.hist = data.history(context.universe, 'close', context.sma_longterm, '1d')
    
def trade_market_open(context,data):

    # Get backtest date and time for reference and print it
    backtest_date = get_datetime()
    print(backtest_date)

    # re-name our context.universe_df to make it simpler
    df = context.universe_df
    
    # create series of data for each of our stocks
    current_px = data.current(context.universe, 'open')
    day2ago_sma_fast = context.hist[-context.day2ago_sma_fast:-2].mean()
    day2ago_sma_slow = context.hist[-context.day2ago_sma_slow:-2].mean()
    day1ago_sma_fast = context.hist[-context.day1ago_sma_fast:].mean()
    day1ago_sma_slow = context.hist[-context.day1ago_sma_slow:].mean()
    day2ago_signal = day2ago_sma_slow > day2ago_sma_fast
    day1ago_signal = day1ago_sma_fast > day1ago_sma_slow
    
    # add all series to dataframe
    df['day2ago_sma_slow'] = day2ago_sma_slow
    df['day2ago_sma_fast'] = day2ago_sma_fast
    df['day2ago_signal'] = day2ago_signal
    df['day1ago_sma_slow'] = day1ago_sma_slow
    df['day1ago_sma_fast'] = day1ago_sma_fast
    df['day1ago_signal'] = day1ago_signal
    df['current_px'] = current_px
    

    # create dataframes for trades
    df_bl = df.loc[(df['day2ago_signal'] == True) & (df['day1ago_signal'] == True)]
    print('Number of buy longs: {b}'.format(b=len(df_bl)))
    df_ss = df.loc[(df['day2ago_signal'] == False) & (df['day1ago_signal'] == False) & (df['current_px'] > 0)]
    print('Number of sell shorts: {s}'.format(s=len(df_ss)))
    

    # create and place trades
    context.num_trades = (len(df_bl)+(len(df_ss)))
    if context.num_trades == 0:
        print('NO TRADES TODAY!!!')
    elif context.num_trades > 0:
        context.weight = 1.0/context.num_trades
        for sid in df_bl.index:
            order_target_percent(sid, context.weight)
            cp = float(data.current([sid],'price'))
            print('Buying Long: {s}, {w}%, ${p}'.format(s=sid, w=100*context.weight, p=cp))
        for sid in df_ss.index:
            order_target_percent(sid, -context.weight)
            cp = float(data.current([sid],'price'))
            print('Selling Short: {s}, {w}%, ${p}'.format(s=sid, w=100*-context.weight, p=cp))

def trade_market_close(context,data):
    
    # Get backtest date and time for reference and print it
    backtest_date = get_datetime()
    print(backtest_date)

    if len(context.portfolio.positions) > 0:
        for sid in context.portfolio.positions:
            order_target_percent(sid, 0.0)
            cp = float(data.current([sid],'price'))
            print('Closed Position: {s}, ${p}'.format(s=sid, p=cp))
    
def handle_data(context,data):
    pass

def cancel_open(context,data):
     
    oo = get_open_orders()
    for sec in oo:
        for order in oo[sec]:
            cancel_order(order.id)
