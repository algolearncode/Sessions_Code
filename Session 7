from blueshift_library.technicals.indicators import rsi 

# zipline import
from zipline.pipeline.data import EquityPricing
from zipline.finance import slippage 
from zipline.api import (   symbol,
                            schedule_function,
                            date_rules,
                            time_rules,
                            order_percent,
                            order_target_percent,
                            get_open_orders,
                            cancel_order,
                            set_slippage,
                            get_datetime)

# import pandas and numpy
import pandas as pd
import numpy as np

def initialize(context):

    # slippage model
    set_slippage(slippage.FixedSlippage(spread=0.01))

    # stock universe - list of tickers
    securities_500 = ['MMM','ABT','ABBV','ABMD','ACN','ATVI','ADBE','AMD','AAP','AES','AFL','A','APD','AKAM','ALK','ALB','ARE','ALXN','ALGN','ALLE','LNT','ALL','GOOGL','GOOG','MO','AMZN','AEE','AAL','AEP','AXP','AIG','AMT','AWK','AMP','ABC','AME','AMGN','APH','ADI','ANSS','ANTM','AON','AOS','APA','AAPL','AMAT','ADM','ANET','AJG','AIZ','T','ATO','ADSK','ADP','AZO','AVB','AVY','BLL','BAC','BK','BAX','BDX','BRK.B','BBY','BIO','BIIB','BLK','BA','BKNG','BWA','BXP','BSX','BMY','AVGO','BR','BF.B','CHRW','COG','CDNS','CPB','COF','CAH','KMX','CCL','CARR','CAT','CBOE','CBRE','CDW','CE','CNC','CNP','CERN','CF','SCHW','CHTR','CVX','CMG','CB','CHD','CI','CINF','CTAS','CSCO','C','CFG','CTXS','CLX','CME','CMS','KO','CTSH','CL','CMCSA','CMA','CAG','COP','ED','STZ','COO','CPRT','GLW','CTVA','COST','CCI','CSX','CMI','CVS','DHI','DHR','DRI','DVA','DE','DAL','XRAY','DVN','DXCM','FANG','DLR','DFS','DISCA','DISCK','DISH','DG','DLTR','D','DPZ','DOV','DOW','DTE','DUK','DRE','DD','DXC','EMN','ETN','EBAY','ECL','EIX','EW','EA','EMR','ETR','EOG','EFX','EQIX','EQR','ESS','EL','EVRG','ES','RE','EXC','EXPE','EXPD','EXR','XOM','FFIV','FB','FAST','FRT','FDX','FIS','FITB','FE','FRC','FISV','FLT','FLIR','FLS','FMC','F','FTNT','FTV','FBHS','FOXA','FOX','BEN','FCX','GPS','GRMN','IT','GD','GE','GIS','GM','GPC','GILD','GPN','GS','GWW','HAL','HBI','HIG','HAS','HCA','HSIC','HSY','HES','HPE','HLT','HFC','HOLX','HD','HON','HRL','HST','HPQ','HUM','HBAN','HII','IEX','IDXX','INFO','ITW','ILMN','INCY','IR','INTC','ICE','IBM','IP','IPG','IFF','INTU','ISRG','IVZ','IPGP','IQV','IRM','JKHY','JBHT','SJM','JNJ','JCI','JPM','JNPR','KSU','K','KEY','KEYS','KMB','KIM','KMI','KLAC','KHC','KR','LB','LH','LRCX','LW','LVS','LEG','LDOS','LEN','LLY','LNC','LIN','LYV','LKQ','LMT','L','LOW','LYB','MTB','MRO','MPC','MKTX','MAR','MMC','MLM','MAS','MA','MKC','MXIM','MCD','MCK','MDT','MRK','MET','MTD','MGM','MCHP','MU','MSFT','MAA','MHK','TAP','MDLZ','MNST','MCO','MS','MOS','MSI','MSCI','NDAQ','NTAP','NFLX','NWL','NEM','NWSA','NWS','NEE','NLSN','NKE','NI','NSC','NTRS','NOC','NCLH','NOV','NRG','NUE','NVDA','NVR','ORLY','OXY','ODFL','OMC','OKE','ORCL','OTIS','PCAR','PKG','PH','PAYX','PAYC','PYPL','PNR','PBCT','PEP','PKI','PRGO','PFE','PM','PSX','PNW','PXD','PNC','PPG','PPL','PFG','PG','PGR','PLD','PRU','PEG','PSA','PHM','PVH','QRVO','PWR','QCOM','DGX','RL','RJF','O','REG','REGN','RF','RSG','RMD','RHI','ROK','ROP','ROST','RCL','SPGI','CRM','SBAC','SLB','STX','SEE','SRE','NOW','SHW','SPG','SWKS','SLG','SNA','SO','LUV','SWK','SBUX','STT','STE','SYK','SIVB','SNPS','SYY','TMUS','TROW','TTWO','TPR','TGT','TEL','FTI','TDY','TFX','TER','TSLA','TXN','TXT','TMO','TJX','TSCO','TT','TDG','TRV','TWTR','TYL','TSN','UDR','ULTA','USB','UA','UNP','UAL','UNH','UPS','URI','UHS','UNM','VLO','VAR','VTR','VRSN','VRSK','VZ','VRTX','VFC','V','VNO','VMC','WRB','WAB','WMT','WBA','DIS','WM','WAT','WEC','WFC','WELL','WST','WDC','WU','WRK','WY','WHR','WMB','WLTW','WYNN','XEL','XRX','XLNX','XYL','YUM','ZBRA','ZBH','ZION','ZTS']
    
    # change string list of tickers into asset list using symbol function
    context.securities = [symbol(s) for s in securities_500]
   
    # create dictionary to define strategy parameters
    context.params = {'window':50, 'frequency':'1d', 'RSI_period':14}
    context.signals = dict((security,0) for security in context.securities)
    context.target_position = dict((security,0) for security in context.securities)

    schedule_function(run_strategy, date_rules.every_day(), time_rules.market_open())

def run_strategy(context,data):

    backtest_datetime = get_datetime()
    print(backtest_datetime)

    generate_signals(context,data)
    generate_target_position(context,data)
    rebalance(context,data)

def rebalance(context,data):

    print('STEP 3: rebalance function')
 
    for security in context.securities:
        if context.target_position[security] != 0:
            order_target_percent(security, context.target_position[security])
            print('Traded:', security, context.target_position[security])
            context.target_position[security] = 0 

def generate_target_position(context,data):

    print('STEP 2: generate_target_position')

    context.stocks = 0
    for security in context.signals:
        if context.signals[security] == 1 or context.signals[security] == -1:
            context.stocks = context.stocks + 1
    
    print('stocks to trade:', context.stocks)

    # set equal weighting to the total # of stocks with 1 or -1 signal
    if context.stocks == 0:
        weight = 0.0
    elif context.stocks > 0:
        weight = 1.0/context.stocks
    print('weight:', weight)

    # assign weightings into dictionary for each stock with 1 or -1 signal
    for security in context.securities:
        if context.signals[security] == 1:
            context.target_position[security] = weight
        elif context.signals[security] == -1:
            context.target_position[security] = -weight
        elif context.signals[security] == 0:
            context.target_position[security] = 0
            order_target_percent(security,0)



def generate_signals(context,data):

    print('STEP 1: generate_signals')

    price_data = data.history(context.securities, 'close', context.params['window'], context.params['frequency'])

    # assign signals into signal dictionary for each security
    for security in context.securities:
        px = price_data.loc[:,security].values
        px = np.nan_to_num(px)
        if px[-1] == 0: 
            context.signals[security] = 2 # signals no data yet for security
        elif context.signals[security] == 0 or context.signals[security] == 2:
            context.signals[security] = signal_function(px, context.params)
        elif context.signals[security] == 1:
            context.signals[security] = long_exit_function(px, context.params)
        elif context.signals[security] == -1:
            context.signals[security] = short_exit_function(px, context.params)
    
def signal_function(px, params):

    # main trading logic to generate initial signals

    ind1 = 0
    ind1 = rsi(px, params['RSI_period'])

    if ind1 > 80:
        return -1
    elif ind1 < 25 and ind1 > 0:
        return 1
    else:
        return 0

def long_exit_function(px, params):

    ind1 = 0
    ind1 = rsi(px, params['RSI_period'])

    if ind1 > 40:
        return 0
    else:
        return 1  

def short_exit_function(px, params):

    ind1 = 0
    ind1 = rsi(px, params['RSI_period'])

    if ind1 < 65:
        return 0
    else:
        return -1 
